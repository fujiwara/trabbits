// MIT License
// Copyright (c) 2025 FUJIWARA Shunichiro

package trabbits

import (
	"context"
	"errors"
	"fmt"
	"io"
	"os"
	"sync"

	"github.com/fujiwara/trabbits/amqp091"
	rabbitmq "github.com/rabbitmq/amqp091-go"
)

func (p *Proxy) replyChannelOpen(ctx context.Context, f *amqp091.MethodFrame, m *amqp091.ChannelOpen) error {
	id := f.Channel()
	p.sendProbeLog("Channel.Open", "channel", id, "message", m)

	if err := p.NewChannel(id); err != nil {
		return fmt.Errorf("failed to create channel: %w", err)
	}
	if err := p.send(id, &amqp091.ChannelOpenOk{}); err != nil {
		return fmt.Errorf("failed to write Channel.Open-Ok: %w", err)
	}
	return nil
}

func (p *Proxy) replyChannelClose(_ context.Context, f *amqp091.MethodFrame, m *amqp091.ChannelClose) error {
	id := f.Channel()
	p.sendProbeLog("Channel.Close", "channel", id, "message", m)
	if err := p.CloseChannel(id); err != nil {
		return err
	}
	return p.send(id, &amqp091.ChannelCloseOk{})
}

func (p *Proxy) replyConnectionClose(_ context.Context, _ *amqp091.MethodFrame, _ *amqp091.ConnectionClose) error {
	return p.send(0, &amqp091.ConnectionCloseOk{})
}

func (p *Proxy) replyQueueDeclare(_ context.Context, f *amqp091.MethodFrame, m *amqp091.QueueDeclare) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}

	p.sendProbeLog("Queue.Declare", "message", m)
	if m.Queue == "" {
		m.Queue = AutoGenerateQueueNamePrefix + generateID()
		p.sendProbeLog("Queue.Declare auto-generated name", "name", m.Queue)
	}
	var messages, consumers int
	var queueName string
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Queue.Declare on upstream", "upstream", us.String(), "message", m)
		q, err := us.QueueDeclareWithTryPassive(ch, m)
		if err != nil {
			return fmt.Errorf("failed to declare queue on upstream: %w", err)
		}
		p.sendProbeLog("Queue.Declare result", "upstream", us.String(), "result", q)
		messages += q.Messages
		consumers += q.Consumers
		if queueName == "" {
			queueName = q.Name
		} else if queueName != q.Name {
			return NewError(amqp091.InternalError, "queue name mismatch")
		}
		us.CleanupAutoGeneratedQueue(q.Name)
	}
	p.sendProbeLog("Queue.Declare completed", "final_name", queueName, "total_messages", messages, "total_consumers", consumers)

	return p.send(id, &amqp091.QueueDeclareOk{
		Queue:         queueName,
		MessageCount:  uint32(messages),
		ConsumerCount: uint32(consumers),
	})
}

func (p *Proxy) replyBasicPublish(ctx context.Context, f *amqp091.MethodFrame, m *amqp091.BasicPublish) error {
	id := f.Channel()
	ch, err := p.GetChannel(id, m.RoutingKey)
	if err != nil {
		return err
	}
	p.sendProbeLog("Basic.Publish", "message", m)
	if err := ch.PublishWithContext(
		ctx,
		m.Exchange,
		m.RoutingKey,
		m.Mandatory,
		m.Immediate,
		rabbitmq.Publishing{
			Body:            m.Body,
			AppId:           m.Properties.AppId,
			ContentEncoding: m.Properties.ContentEncoding,
			ContentType:     m.Properties.ContentType,
			CorrelationId:   m.Properties.CorrelationId,
			DeliveryMode:    m.Properties.DeliveryMode,
			Expiration:      m.Properties.Expiration,
			MessageId:       m.Properties.MessageId,
			ReplyTo:         m.Properties.ReplyTo,
			Timestamp:       m.Properties.Timestamp,
			Type:            m.Properties.Type,
			UserId:          m.Properties.UserId,
			Headers:         rabbitmq.Table(m.Properties.Headers),
		},
	); err != nil {
		return NewError(amqp091.InternalError, fmt.Sprintf("failed to publish message: %v", err))
	}
	return nil
}

func (p *Proxy) replyBasicConsume(ctx context.Context, f *amqp091.MethodFrame, m *amqp091.BasicConsume) error {
	id := f.Channel()
	uss := p.Upstreams()

	p.sendProbeLog("Basic.Consume", "message", m)
	deliveries := make([]*delivery, 0, len(uss))
	for i, us := range uss {
		p.sendProbeLog("Basic.Consume on upstream", "upstream", us.String())
		ch, err := us.GetChannel(id)
		if err != nil {
			return fmt.Errorf("failed to get channel: %w", err)
		}
		consume, err := ch.ConsumeWithContext(
			ctx,
			m.Queue,
			m.ConsumerTag,
			m.NoAck,
			m.Exclusive,
			m.NoLocal,
			m.NoWait,
			rabbitmq.Table(m.Arguments),
		)
		if err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to consume: %v", err))
		}
		d := p.newDelivery(consume, i)
		deliveries = append(deliveries, d)
	}

	if err := p.send(id, &amqp091.BasicConsumeOk{
		ConsumerTag: m.ConsumerTag,
	}); err != nil {
		return NewError(amqp091.InternalError, fmt.Sprintf("failed to send Basic.ConsumeOk: %v", err))
	}

	tag := m.ConsumerTag
	q := m.Queue
	var wg sync.WaitGroup
	for _, d := range deliveries {
		wg.Add(1)
		go func() {
			defer recoverFromPanic(p.logger, "consume.goroutine", p.metrics)
			defer wg.Done()
			p.consume(ctx, id, q, tag, d)
		}()
	}
	return nil
}

func (p *Proxy) consume(ctx context.Context, id uint16, queue, tag string, d *delivery) {
	for {
		select {
		case <-ctx.Done():
			return
		case msg, ok := <-d.ch:
			if !ok {
				p.sendProbeLog("Basic.Consume closed", "queue", queue)
				return
			}
			p.sendProbeLog("Basic.Deliver", "exchange", msg.Exchange, "routing_key", msg.RoutingKey, "delivery_tag", msg.DeliveryTag)
			err := p.send(id, &amqp091.BasicDeliver{
				ConsumerTag: tag,
				DeliveryTag: d.Tag(msg.DeliveryTag), // rewrite delivery tag
				Redelivered: msg.Redelivered,
				Exchange:    msg.Exchange,
				RoutingKey:  msg.RoutingKey,
				Body:        msg.Body,
				Properties:  deliveryToProps(&msg),
			})
			if err != nil {
				if errors.Is(err, io.EOF) || errors.Is(err, os.ErrClosed) || isBrokenPipe(err) {
					// ignore
				} else {
					p.logger.Warn("failed to deliver message", "error", err)
				}
				return
			}
		}
	}
}

func (p *Proxy) replyBasicGet(ctx context.Context, f *amqp091.MethodFrame, m *amqp091.BasicGet) error {
	id := f.Channel()
	uss := p.Upstreams()
	p.sendProbeLog("Basic.Get", "message", m)
	var got bool
	for i, us := range uss {
		p.sendProbeLog("Basic.Get on upstream", "upstream", us.String())
		ch, err := us.GetChannel(id)
		if err != nil {
			return fmt.Errorf("failed to get channel: %w", err)
		}
		msg, ok, err := ch.Get(m.Queue, m.NoAck)
		if err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to get message: %v", err))
		}
		if !ok {
			continue
		}

		got = true
		dTag := p.newDelivery(nil, i).Tag(msg.DeliveryTag)
		p.sendProbeLog("Basic.Get received", "queue", m.Queue, "client_delivery_tag", dTag, "upstream_delivery_tag", msg.DeliveryTag)
		p.send(id, &amqp091.BasicGetOk{
			DeliveryTag:  dTag,
			Redelivered:  msg.Redelivered,
			Exchange:     msg.Exchange,
			RoutingKey:   msg.RoutingKey,
			MessageCount: uint32(msg.MessageCount),
			Body:         msg.Body,
			Properties:   deliveryToProps(&msg),
		})
		break
	}
	if !got {
		if err := p.send(id, &amqp091.BasicGetEmpty{}); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to send Basic.GetEmpty: %v", err))
		}
	}
	return nil
}

func (p *Proxy) replyBasicAck(_ context.Context, f *amqp091.MethodFrame, m *amqp091.BasicAck) error {
	id := f.Channel()
	ch, err := p.GetChannelByDeliveryTag(id, m.DeliveryTag)
	if err != nil {
		return err
	}
	tag := p.UpstreamDeliveryTag(m.DeliveryTag)
	p.sendProbeLog("Basic.Ack", "message", m, "upstream_delivery_tag", tag)
	return ch.Ack(tag, m.Multiple)
}

func (p *Proxy) replyBasicNack(_ context.Context, f *amqp091.MethodFrame, m *amqp091.BasicNack) error {
	id := f.Channel()
	ch, err := p.GetChannelByDeliveryTag(id, m.DeliveryTag)
	if err != nil {
		return err
	}
	tag := p.UpstreamDeliveryTag(m.DeliveryTag)
	p.sendProbeLog("Basic.Nack", "message", m, "upstream_delivery_tag", tag)
	return ch.Nack(tag, m.Multiple, m.Requeue)
}

func deliveryToProps(msg *rabbitmq.Delivery) amqp091.Properties {
	return amqp091.Properties{
		ContentType:     msg.ContentType,
		ContentEncoding: msg.ContentEncoding,
		DeliveryMode:    msg.DeliveryMode,
		Priority:        msg.Priority,
		CorrelationId:   msg.CorrelationId,
		ReplyTo:         msg.ReplyTo,
		Expiration:      msg.Expiration,
		MessageId:       msg.MessageId,
		Timestamp:       msg.Timestamp,
		Type:            msg.Type,
		UserId:          msg.UserId,
		AppId:           msg.AppId,
		Headers:         amqp091.Table(msg.Headers),
	}
}

func (p *Proxy) replyBasicCancel(_ context.Context, f *amqp091.MethodFrame, m *amqp091.BasicCancel) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}
	p.sendProbeLog("Basic.Cancel", "message", m)
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Basic.Cancel on upstream", "upstream", us.String())
		if err := ch.Cancel(m.ConsumerTag, false); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to cancel consumer: %v", err))
		}
	}
	return p.send(id, &amqp091.BasicCancelOk{
		ConsumerTag: m.ConsumerTag,
	})
}

func (p *Proxy) replyQueueDelete(_ context.Context, f *amqp091.MethodFrame, m *amqp091.QueueDelete) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}
	p.sendProbeLog("Queue.Delete", "message", m)
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Queue.Delete on upstream", "upstream", us.String())
		if _, err := ch.QueueDelete(
			m.Queue,
			m.IfUnused,
			m.IfEmpty,
			m.NoWait,
		); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to delete queue: %v", err))
		}
	}
	return p.send(id, &amqp091.QueueDeleteOk{})
}

func (p *Proxy) replyQueueBind(_ context.Context, f *amqp091.MethodFrame, m *amqp091.QueueBind) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}
	p.sendProbeLog("Queue.Bind", "message", m)
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Queue.Bind on upstream", "upstream", us.String())
		if err := ch.QueueBind(
			m.Queue,
			m.RoutingKey,
			m.Exchange,
			m.NoWait,
			rabbitmq.Table(m.Arguments),
		); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to bind queue: %v", err))
		}
	}
	return p.send(id, &amqp091.QueueBindOk{})
}

func (p *Proxy) replyQueueUnbind(_ context.Context, f *amqp091.MethodFrame, m *amqp091.QueueUnbind) error {
	id := f.Channel()
	uss := p.Upstreams()
	p.sendProbeLog("Queue.Unbind", "message", m)
	for _, us := range uss {
		p.sendProbeLog("Queue.Unbind on upstream", "upstream", us.String())
		ch, err := us.GetChannel(id)
		if err != nil {
			return fmt.Errorf("failed to get channel: %w", err)
		}
		if err := ch.QueueUnbind(
			m.Queue,
			m.RoutingKey,
			m.Exchange,
			rabbitmq.Table(m.Arguments),
		); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to unbind queue: %v", err))
		}
	}

	return p.send(id, &amqp091.QueueUnbindOk{})
}

func (p *Proxy) replyBasicQos(_ context.Context, f *amqp091.MethodFrame, m *amqp091.BasicQos) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}
	p.sendProbeLog("Basic.Qos", "message", m)
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Basic.Qos on upstream", "upstream", us.String())
		if err := ch.Qos(
			int(m.PrefetchCount),
			int(m.PrefetchSize),
			m.Global,
		); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to set QoS: %v", err))
		}
	}
	return p.send(id, &amqp091.BasicQosOk{})
}

func (p *Proxy) replyExchangeDeclare(_ context.Context, f *amqp091.MethodFrame, m *amqp091.ExchangeDeclare) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}
	p.sendProbeLog("Exchange.Declare", "message", m)
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Exchange.Declare on upstream", "upstream", us.String())
		if err := ch.ExchangeDeclare(
			m.Exchange,
			m.Type,
			m.Durable,
			m.AutoDelete,
			false, // internal
			false, // no-wait
			rabbitmq.Table(m.Arguments),
		); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to declare exchange: %v", err))
		}
	}
	return p.send(id, &amqp091.ExchangeDeclareOk{})
}

func (p *Proxy) replyQueuePurge(_ context.Context, f *amqp091.MethodFrame, m *amqp091.QueuePurge) error {
	id := f.Channel()
	chs, err := p.GetChannels(id)
	if err != nil {
		return err
	}
	p.sendProbeLog("Queue.Purge", "message", m)
	for i, ch := range chs {
		us := p.Upstream(i)
		p.sendProbeLog("Queue.Purge on upstream", "upstream", us.String())
		// always wait upstream response
		if _, err := ch.QueuePurge(m.Queue, true); err != nil {
			return NewError(amqp091.InternalError, fmt.Sprintf("failed to purge queue: %v", err))
		}
	}
	return p.send(id, &amqp091.QueuePurgeOk{
		MessageCount: 0,
	})
}
